{
  
    
        "post0": {
            "title": "Data science revesion - chapter 1",
            "content": ". Chapter 1: Python . lets get started . Chapter Outline . . 1. Introduction | 2. Basic Python Data Types | 3. Lists and Tuples | 4. String Methods | 5. Dictionaries | 6. Empties | 7. Conditionals | . Chapter Learning Objectives . Create, describe and differentiate standard Python datatypes such as int, float, string, list, dict, tuple, etc. | Perform arithmetic operations like +, -, *, ** on numeric values. | Perform basic string operations like .lower(), .split() to manipulate strings. | Compute boolean values using comparison operators operations (==, !=, &gt;, etc.) and boolean operators (and, or, not). | Assign, index, slice and subset values to and from tuples, lists, strings and dictionaries. | Write a conditional statement with if, elif and else. | Identify code blocks by levels of indentation. | Explain the difference between mutable objects like a list and immutable objects like a tuple. | . 1. Introduction . The material presented on this website assumes no prior knowledge of Python. Experience with programming concepts or another programming language will help, but is not required to understand the material. . The website comprises the following: . Chapters: these contain the core content. Read through these at your leisure. | Practice Exercises: there are optional practice exercise sets to complement each chapter (solutions included). Try your hand at these for extra practice and to help solidify concepts in the Chapters. | 2. Basic Python Data Types . A value is a piece of data that a computer program works with such as a number or text. There are different types of values: 42 is an integer and &quot;Hello!&quot; is a string. A variable is a name that refers to a value. In mathematics and statistics, we usually use variable names like $x$ and $y$. In Python, we can use any word as a variable name as long as it starts with a letter or an underscore. However, it should not be a reserved word in Python such as for, while, class, lambda, etc. as these words encode special functionality in Python that we don&#39;t want to overwrite! . It can be helpful to think of a variable as a box that holds some information (a single number, a vector, a string, etc). We use the assignment operator = to assign a value to a variable. . . Image modified from: medium.com . {tip} See the [Python 3 documentation](https://docs.python.org/3/library/stdtypes.html) for a summary of the standard built-in Python datatypes. . Common built-in Python data types . English name Type name Type Category Description Example . integer | int | Numeric Type | positive/negative whole numbers | 42 | . floating point number | float | Numeric Type | real number in decimal form | 3.14159 | . boolean | bool | Boolean Values | true or false | True | . string | str | Sequence Type | text | &quot;I Can Has Cheezburger?&quot; | . list | list | Sequence Type | a collection of objects - mutable &amp; ordered | [&#39;Ali&#39;, &#39;Xinyi&#39;, &#39;Miriam&#39;] | . tuple | tuple | Sequence Type | a collection of objects - immutable &amp; ordered | (&#39;Thursday&#39;, 6, 9, 2018) | . dictionary | dict | Mapping Type | mapping of key-value pairs | {&#39;name&#39;:&#39;DSCI&#39;, &#39;code&#39;:511, &#39;credits&#39;:2} | . none | NoneType | Null Object | represents no value | None | . Numeric data types . There are three distinct numeric types: integers, floating point numbers, and complex numbers (not covered here). We can determine the type of an object in Python using type(). We can print the value of the object using print(). . x = 42 . type(x) . int . print(x) . 42 . In Jupyter/IPython (an interactive version of Python), the last line of a cell will automatically be printed to screen so we don&#39;t actually need to explicitly call print(). . x # Anything after the pound/hash symbol is a comment and will not be run . 42 . pi = 3.14159 pi . 3.14159 . type(pi) . float . Arithmetic Operators . Below is a table of the syntax for common arithmetic operations in Python: . Operator Description . + | addition | . - | subtraction | . * | multiplication | . / | division | . ** | exponentiation | . // | integer division / floor division | . % | modulo | . Let&#39;s have a go at applying these operators to numeric types and observe the results. . 1 + 2 + 3 + 4 + 5 # add . 15 . 2 * 3.14159 # multiply . 6.28318 . 2 ** 10 # exponent . 1024 . Division may produce a different dtype than expected, it will change int to float. . int_2 = 2 type(int_2) . int . int_2 / int_2 # divison . 1.0 . type(int_2 / int_2) . float . But the syntax // allows us to do &quot;integer division&quot; (aka &quot;floor division&quot;) and retain the int data type, it always rounds down. . 101 / 2 . 50.5 . 101 // 2 # &quot;floor division&quot; - always rounds down . 50 . We refer to this as &quot;integer division&quot; or &quot;floor division&quot; because it&#39;s like calling int on the result of a division, which rounds down to the nearest integer, or &quot;floors&quot; the result. . int(101 / 2) . 50 . The % &quot;modulo&quot; operator gives us the remainder after division. . 100 % 2 # &quot;100 mod 2&quot;, or the remainder when 100 is divided by 2 . 0 . 101 % 2 # &quot;101 mod 2&quot;, or the remainder when 101 is divided by 2 . 1 . 100.5 % 2 . 0.5 . None . NoneType is its own type in Python. It only has one possible value, None - it represents an object with no value. We&#39;ll see it again in a later chapter. . x = None . print(x) . None . type(x) . NoneType . Strings . Text is stored as a data type called a string. We can think of a string as a sequence of characters. . {tip} Actually they are a sequence of Unicode code points. Here&#39;s a [great blog post](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/) on Unicode if you&#39;re interested. . We write strings as characters enclosed with either: . single quotes, e.g., &#39;Hello&#39; | double quotes, e.g., &quot;Goodbye&quot; | . There&#39;s no difference between the two methods, but there are cases where having both is useful (more on that below)! We also have triple double quotes, which are typically used for function documentation (more on that in a later chapter), e.g., &quot;&quot;&quot;This function adds two numbers&quot;&quot;&quot;. . my_name = &quot;Tomas Beuzen&quot; . my_name . &#39;Tomas Beuzen&#39; . type(my_name) . str . course = &#39;DSCI 511&#39; . course . &#39;DSCI 511&#39; . type(course) . str . If the string contains a quotation or apostrophe, we can use a combination of single and double quotes to define the string. . sentence = &quot;It&#39;s a rainy day.&quot; . sentence . &#34;It&#39;s a rainy day.&#34; . type(sentence) . str . quote = &#39;Donald Knuth: &quot;Premature optimization is the root of all evil.&quot;&#39; . quote . &#39;Donald Knuth: &#34;Premature optimization is the root of all evil.&#34;&#39; . Boolean . The Boolean (bool) type has two values: True and False. . the_truth = True . the_truth . True . type(the_truth) . bool . lies = False . lies . False . type(lies) . bool . Comparison Operators . We can compare objects using comparison operators, and we&#39;ll get back a Boolean result: . Operator Description . x == y | is x equal to y? | . x != y | is x not equal to y? | . x &gt; y | is x greater than y? | . x &gt;= y | is x greater than or equal to y? | . x &lt; y | is x less than y? | . x &lt;= y | is x less than or equal to y? | . x is y | is x the same object as y? | . 2 &lt; 3 . True . &quot;Deep learning&quot; == &quot;Solve all the world&#39;s problems&quot; . False . 2 != &quot;2&quot; . True . 2 is 2 . True . 2 == 2.0 . True . Boolean Operators . We also have so-called &quot;boolean operators&quot; which also evaluates to either True or False: . Operator Description . x and y | are x and y both True? | . x or y | is at least one of x and y True? | . not x | is x False? | . True and True . True . True and False . False . True or False . True . False or False . False . (&quot;Python 2&quot; != &quot;Python 3&quot;) and (2 &lt;= 3) . True . True . True . not True . False . not not True . True . {note} Python also has [bitwise operators](https://wiki.python.org/moin/BitwiseOperators) like `&amp;` and `|`. Bitwise operators literally compare the bits of two integers. That&#39;s beyond the scope of this course but I&#39;ve included a code snippet below to show you them in action. . print(f&quot;Bit representation of the number 5: {5:0b}&quot;) print(f&quot;Bit representation of the number 4: {4:0b}&quot;) print(f&quot; ↓↓↓&quot;) print(f&quot; {5 &amp; 4:0b}&quot;) print(f&quot; ↓ &quot;) print(f&quot; {5 &amp; 4}&quot;) . Bit representation of the number 5: 101 Bit representation of the number 4: 100 ↓↓↓ 100 ↓ 4 . Casting . Sometimes we need to explicitly cast a value from one type to another. We can do this using functions like str(), int(), and float(). Python tries to do the conversion, or throws an error if it can&#39;t. . x = 5.0 type(x) . float . x = int(5.0) x . 5 . type(x) . int . x = str(5.0) x . &#39;5.0&#39; . type(x) . str . str(5.0) == 5.0 . False . int(5.3) . 5 . float(&quot;hello&quot;) . ValueError Traceback (most recent call last) &lt;ipython-input-69-7124e8e12e61&gt; in &lt;module&gt; -&gt; 1 float(&#34;hello&#34;) ValueError: could not convert string to float: &#39;hello&#39; . 3. Lists and Tuples . Lists and tuples allow us to store multiple things (&quot;elements&quot;) in a single object. The elements are ordered (we&#39;ll explore what that means a little later). We&#39;ll start with lists. Lists are defined with square brackets []. . my_list = [1, 2, &quot;THREE&quot;, 4, 0.5] . my_list . [1, 2, &#39;THREE&#39;, 4, 0.5] . type(my_list) . list . Lists can hold any datatype - even other lists! . another_list = [1, &quot;two&quot;, [3, 4, &quot;five&quot;], True, None, {&quot;key&quot;: &quot;value&quot;}] another_list . [1, &#39;two&#39;, [3, 4, &#39;five&#39;], True, None, {&#39;key&#39;: &#39;value&#39;}] . You can get the length of the list with the function len(): . len(my_list) . 5 . Tuples look similar to lists but have a key difference (they are immutable - but more on that a bit later). They are defined with parentheses (). . today = (1, 2, &quot;THREE&quot;, 4, 0.5) . today . (1, 2, &#39;THREE&#39;, 4, 0.5) . type(today) . tuple . len(today) . 5 . Indexing and Slicing Sequences . We can access values inside a list, tuple, or string using square bracket syntax. Python uses zero-based indexing, which means the first element of the list is in position 0, not position 1. . my_list . [1, 2, &#39;THREE&#39;, 4, 0.5] . my_list[0] . 1 . my_list[2] . &#39;THREE&#39; . len(my_list) . 5 . my_list[5] . IndexError Traceback (most recent call last) &lt;ipython-input-84-075ca585e721&gt; in &lt;module&gt; -&gt; 1 my_list[5] IndexError: list index out of range . We can use negative indices to count backwards from the end of the list. . my_list . [1, 2, &#39;THREE&#39;, 4, 0.5] . my_list[-1] . 0.5 . my_list[-2] . 4 . We can use the colon : to access a sub-sequence. This is called &quot;slicing&quot;. . my_list[1:3] . [2, &#39;THREE&#39;] . Note from the above that the start of the slice is inclusive and the end is exclusive. So my_list[1:3] fetches elements 1 and 2, but not 3. . Strings behave the same as lists and tuples when it comes to indexing and slicing. Remember, we think of them as a sequence of characters. . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; . alphabet[0] . &#39;a&#39; . alphabet[-1] . &#39;z&#39; . alphabet[-3] . &#39;x&#39; . alphabet[:5] . &#39;abcde&#39; . alphabet[12:20] . &#39;mnopqrst&#39; . List Methods . A list is an object and it has methods for interacting with its data. A method is like a function, it performs some operation with the data, but a method differs to a function in that it is defined on the object itself and accessed using a period .. For example, my_list.append(item) appends an item to the end of the list called my_list. You can see the documentation for more list methods. . primes = [2, 3, 5, 7, 11] primes . [2, 3, 5, 7, 11] . len(primes) . 5 . primes.append(13) . primes . [2, 3, 5, 7, 11, 13] . Sets . Another built-in Python data type is the set, which stores an un-ordered list of unique items. Being unordered, sets do not record element position or order of insertion and so do not support indexing. . s = {2, 3, 5, 11} s . {2, 3, 5, 11} . {1, 2, 3} == {3, 2, 1} . True . [1, 2, 3] == [3, 2, 1] . False . s.add(2) # does nothing s . {2, 3, 5, 11} . s[0] . TypeError Traceback (most recent call last) &lt;ipython-input-109-c9c96910e542&gt; in &lt;module&gt; -&gt; 1 s[0] TypeError: &#39;set&#39; object is not subscriptable . Above: throws an error because elements are not ordered and can&#39;t be indexing. . Mutable vs. Immutable Types . Strings and tuples are immutable types which means they can&#39;t be modified. Lists are mutable and we can assign new values for its various entries. This is the main difference between lists and tuples. . names_list = [&quot;Indiana&quot;, &quot;Fang&quot;, &quot;Linsey&quot;] names_list . [&#39;Indiana&#39;, &#39;Fang&#39;, &#39;Linsey&#39;] . names_list[0] = &quot;Cool guy&quot; names_list . [&#39;Cool guy&#39;, &#39;Fang&#39;, &#39;Linsey&#39;] . names_tuple = (&quot;Indiana&quot;, &quot;Fang&quot;, &quot;Linsey&quot;) names_tuple . (&#39;Indiana&#39;, &#39;Fang&#39;, &#39;Linsey&#39;) . names_tuple[0] = &quot;Not cool guy&quot; . TypeError Traceback (most recent call last) &lt;ipython-input-113-bd6a1b77b220&gt; in &lt;module&gt; -&gt; 1 names_tuple[0] = &#34;Not cool guy&#34; TypeError: &#39;tuple&#39; object does not support item assignment . Same goes for strings. Once defined we cannot modifiy the characters of the string. . my_name = &quot;Tom&quot; . my_name[-1] = &quot;q&quot; . TypeError Traceback (most recent call last) &lt;ipython-input-115-9bfcf81dbcf0&gt; in &lt;module&gt; -&gt; 1 my_name[-1] = &#34;q&#34; TypeError: &#39;str&#39; object does not support item assignment . x = ([1, 2, 3], 5) . x[1] = 7 . TypeError Traceback (most recent call last) &lt;ipython-input-117-415ce6bd0126&gt; in &lt;module&gt; -&gt; 1 x[1] = 7 TypeError: &#39;tuple&#39; object does not support item assignment . x . ([1, 2, 3], 5) . x[0][1] = 4 . x . ([1, 4, 3], 5) . 4. String Methods . There are various useful string methods in Python. . all_caps = &quot;HOW ARE YOU TODAY?&quot; all_caps . &#39;HOW ARE YOU TODAY?&#39; . new_str = all_caps.lower() new_str . &#39;how are you today?&#39; . Note that the method lower doesn&#39;t change the original string but rather returns a new one. . all_caps . &#39;HOW ARE YOU TODAY?&#39; . There are many string methods. Check out the documentation. . all_caps.split() . [&#39;HOW&#39;, &#39;ARE&#39;, &#39;YOU&#39;, &#39;TODAY?&#39;] . all_caps.count(&quot;O&quot;) . 3 . One can explicitly cast a string to a list: . caps_list = list(all_caps) caps_list . [&#39;H&#39;, &#39;O&#39;, &#39;W&#39;, &#39; &#39;, &#39;A&#39;, &#39;R&#39;, &#39;E&#39;, &#39; &#39;, &#39;Y&#39;, &#39;O&#39;, &#39;U&#39;, &#39; &#39;, &#39;T&#39;, &#39;O&#39;, &#39;D&#39;, &#39;A&#39;, &#39;Y&#39;, &#39;?&#39;] . &quot;&quot;.join(caps_list) . &#39;HOW ARE YOU TODAY?&#39; . &quot;-&quot;.join(caps_list) . &#39;H-O-W- -A-R-E- -Y-O-U- -T-O-D-A-Y-?&#39; . We can also chain multiple methods together (more on this when we get to NumPy and Pandas in later chapters): . &quot;&quot;.join(caps_list).lower().split(&quot; &quot;) . [&#39;how&#39;, &#39;are&#39;, &#39;you&#39;, &#39;today?&#39;] . String formatting . Python has ways of creating strings by &quot;filling in the blanks&quot; and formatting them nicely. This is helpful for when you want to print statements that include variables or statements. There are a few ways of doing this but I use and recommend f-strings which were introduced in Python 3.6. All you need to do is put the letter &quot;f&quot; out the front of your string and then you can include variables with curly-bracket notation {}. . name = &quot;Newborn Baby&quot; age = 4 / 12 day = 10 month = 6 year = 2020 template_new = f&quot;Hello, my name is {name}. I am {age:.2f} years old. I was born {day}/{month:02}/{year}.&quot; template_new . &#39;Hello, my name is Newborn Baby. I am 0.33 years old. I was born 10/06/2020.&#39; . {note} Notes require **no** arguments, In the code above, the notation after the colon in my curly braces is for formatting. For example, `:.2f` means, print this variable with 2 decimal places. See format code options [here](https://docs.python.org/3.4/library/string.html#format-specification-mini-language). . 5. Dictionaries . A dictionary is a mapping between key-values pairs and is defined with curly-brackets: . house = { &quot;bedrooms&quot;: 3, &quot;bathrooms&quot;: 2, &quot;city&quot;: &quot;Vancouver&quot;, &quot;price&quot;: 2499999, &quot;date_sold&quot;: (1, 3, 2015), } condo = { &quot;bedrooms&quot;: 2, &quot;bathrooms&quot;: 1, &quot;city&quot;: &quot;Burnaby&quot;, &quot;price&quot;: 699999, &quot;date_sold&quot;: (27, 8, 2011), } . We can access a specific field of a dictionary with square brackets: . house[&quot;price&quot;] . 2499999 . condo[&quot;city&quot;] . &#39;Burnaby&#39; . We can also edit dictionaries (they are mutable): . condo[&quot;price&quot;] = 5 # price already in the dict condo . {&#39;bedrooms&#39;: 2, &#39;bathrooms&#39;: 1, &#39;city&#39;: &#39;Burnaby&#39;, &#39;price&#39;: 5, &#39;date_sold&#39;: (27, 8, 2011)} . condo[&quot;flooring&quot;] = &quot;wood&quot; . condo . {&#39;bedrooms&#39;: 2, &#39;bathrooms&#39;: 1, &#39;city&#39;: &#39;Burnaby&#39;, &#39;price&#39;: 5, &#39;date_sold&#39;: (27, 8, 2011), &#39;flooring&#39;: &#39;wood&#39;} . We can also delete fields entirely (though I rarely use this): . del condo[&quot;city&quot;] . KeyError Traceback (most recent call last) &lt;ipython-input-138-c9f116276b74&gt; in &lt;module&gt; -&gt; 1 del condo[&#34;city&#34;] KeyError: &#39;city&#39; . condo . {&#39;bedrooms&#39;: 2, &#39;bathrooms&#39;: 1, &#39;price&#39;: 5, &#39;date_sold&#39;: (27, 8, 2011), &#39;flooring&#39;: &#39;wood&#39;} . And we can easily add fields: . condo[5] = 443345 . condo . {&#39;bedrooms&#39;: 2, &#39;bathrooms&#39;: 1, &#39;price&#39;: 5, &#39;date_sold&#39;: (27, 8, 2011), &#39;flooring&#39;: &#39;wood&#39;, 5: 443345} . Keys may be any immutable data type, even a tuple! . condo[(1, 2, 3)] = 777 condo . {&#39;bedrooms&#39;: 2, &#39;bathrooms&#39;: 1, &#39;price&#39;: 5, &#39;date_sold&#39;: (27, 8, 2011), &#39;flooring&#39;: &#39;wood&#39;, 5: 443345, (1, 2, 3): 777} . You&#39;ll get an error if you try to access a non-existent key: . condo[&quot;not-here&quot;] . KeyError Traceback (most recent call last) &lt;ipython-input-143-ab081f66baa5&gt; in &lt;module&gt; -&gt; 1 condo[&#34;not-here&#34;] KeyError: &#39;not-here&#39; . 6. Empties . Sometimes you&#39;ll want to create empty objects that will be filled later on. . lst = list() # empty list lst . [] . lst = [] # empty list lst . [] . There&#39;s no real difference between the two methods above, [] is apparently marginally faster... . tup = tuple() # empty tuple tup . () . tup = () # empty tuple tup . () . dic = dict() # empty dict dic . {} . dic = {} # empty dict dic . {} . st = set() # empty set st . set() . 7. Conditionals . Conditional statements allow us to write programs where only certain blocks of code are executed depending on the state of the program. Let&#39;s look at some examples and take note of the keywords, syntax and indentation. . name = &quot;Tom&quot; if name.lower() == &quot;tom&quot;: print(&quot;That&#39;s my name too!&quot;) elif name.lower() == &quot;santa&quot;: print(&quot;That&#39;s a funny name.&quot;) else: print(f&quot;Hello {name}! That&#39;s a cool name!&quot;) print(&quot;Nice to meet you!&quot;) . That&#39;s my name too! Nice to meet you! . The main points to notice: . Use keywords if, elif and else | The colon : ends each conditional expression | Indentation (by 4 empty space) defines code blocks | In an if statement, the first block whose conditional statement returns True is executed and the program exits the if block | if statements don&#39;t necessarily need elif or else | elif lets us check several conditions | else lets us evaluate a default block if all other conditions are False | the end of the entire if statement is where the indentation returns to the same level as the first if keyword | . If statements can also be nested inside of one another: . name = &quot;Super Tom&quot; if name.lower() == &quot;tom&quot;: print(&quot;That&#39;s my name too!&quot;) elif name.lower() == &quot;santa&quot;: print(&quot;That&#39;s a funny name.&quot;) else: print(f&quot;Hello {name}! That&#39;s a cool name.&quot;) if name.lower().startswith(&quot;super&quot;): print(&quot;Do you really have superpowers?&quot;) print(&quot;Nice to meet you!&quot;) . Hello Super Tom! That&#39;s a cool name. Do you really have superpowers? Nice to meet you! . Inline if/else . We can write simple if statements &quot;inline&quot;, i.e., in a single line, for simplicity. . words = [&quot;the&quot;, &quot;list&quot;, &quot;of&quot;, &quot;words&quot;] x = &quot;long list&quot; if len(words) &gt; 10 else &quot;short list&quot; x . &#39;short list&#39; . if len(words) &gt; 10: x = &quot;long list&quot; else: x = &quot;short list&quot; . x . &#39;short list&#39; . Truth Value Testing . Any object can be tested for &quot;truth&quot; in Python, for use in if and while (next chapter) statements. . True values: all objects return True unless they are a bool object with value False or have len() == 0 | False values: None, False, 0, empty sequences and collections: &#39;&#39;, (), [], {}, set() | . {tip} Read more in the [docs here](https://docs.python.org/3/library/stdtypes.html#truth-value-testing). . x = 1 if x: print(&quot;I&#39;m truthy!&quot;) else: print(&quot;I&#39;m falsey!&quot;) . I&#39;m truthy! . x = False if x: print(&quot;I&#39;m truthy!&quot;) else: print(&quot;I&#39;m falsey!&quot;) . I&#39;m falsey! . x = [] if x: print(&quot;I&#39;m truthy!&quot;) else: print(&quot;I&#39;m falsey!&quot;) . I&#39;m falsey! . Short-circuiting . Python supports a concept known as &quot;short-circuting&quot;. This is the automatic stopping of the execution of boolean operation if the truth value of expression has already been determined. . fake_variable # not defined . NameError Traceback (most recent call last) &lt;ipython-input-159-38b1451e4717&gt; in &lt;module&gt; -&gt; 1 fake_variable # not defined NameError: name &#39;fake_variable&#39; is not defined . True or fake_variable . True . True and fake_variable . NameError Traceback (most recent call last) &lt;ipython-input-161-a7196cc665d5&gt; in &lt;module&gt; -&gt; 1 True and fake_variable NameError: name &#39;fake_variable&#39; is not defined . False and fake_variable . False . Expression Result Detail . A or B | If A is True then A else B | B only executed if A is False | . A and B | If A is False then A else B | B only executed if A is True | .",
            "url": "https://millermuttu.github.io/blog/jupyter/python/data%20science/programming/2022/07/15/chapter1-basics.html",
            "relUrl": "/jupyter/python/data%20science/programming/2022/07/15/chapter1-basics.html",
            "date": " • Jul 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://millermuttu.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://millermuttu.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello, Mallikarjun Sajjan here👋 :sunglasses: . I am from Koppal, karnataka, i born and bought up in this small town from North Karnataka. i completed my early schooling till 10th in koppal and moved to hubli for Pre university education. i did my PU in science from Chetan PU collge and secured CET rank of 666 (Yes!! fancy number) and got into RVCE for BE in Electronics and communication. . I started my courier as data scientist in RBEI. and worked on various intresting topics for almost 5 years in bosch, untill i cameout to do my own startup checkag . This is what i am currently busy with: . 🔭 I’m currently working on : My own startup | 🌱 I’m currently learning : MLops, Web development. | 👯 I’m looking to collaborate on : Machine learning projects and Deep learning Projects | 🤔 I’m looking for help with : Machine learning projects and Deep learning Projects | 💬 Ask me about : startup journey, travel, football | 📫 How to reach me: mallikarjunvsaj@gmail.com | 😄 Pronouns: Mallik | ⚡ Fun fact: i like to hangout with people and i dont have people😄. same with my travle story, l like to roam more countries and havent got a job abroad😄 | . . I am an AI/ML Engineer who likes to contribute in computer vision, data science aspects. . GitHub Stats . . . Here my resume. please get connected. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://millermuttu.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://millermuttu.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}